nameOverride: ""
fullnameOverride: ""

# Cert-Manager configuration: https://artifacthub.io/packages/helm/cert-manager/cert-manager?modal=values
cert-manager:
  enabled: false
  fullnameOverride: "cert-manager"
  installCRDs: true

# Comet configuration
comet:
  nodeSelector: {}
  fullnameOverride: "comet"

# API configuration
api:
  nodeSelector: {}
  fullnameOverride: "api"
  env:
    GALILEO_CONSOLE_URL: "https://console.example.local"
    GALILEO_ADDITIONAL_ORIGINS: "*"
    GALILEO_HEADLESS_API_SVC_DNS: "api-hs.galileo.svc.cluster.local"
    GALILEO_RUNNERS_SVC_NAME: "runners-hs.galileo.svc.cluster.local"
    GALILEO_RUNNERS_SVC_PORT: "50052"
  ingress:
    enabled: true
    hosts:
      - host: api.example.local
        paths:
          - path: /
            pathType: Prefix

# Runners configuration
runners:
  nodeSelector: {}

# Wizard configuration
wizard:
  enabled: true
  nodeSelector: {}
  fullnameOverride: "wizard"

# UI configuration
ui:
  nodeSelector: {}
  fullnameOverride: "ui"
  env:
    NEXT_PUBLIC_API_URL: "http://api.example.local"
    NEXTAUTH_URL: "http://console.example.local"
  ingress:
    enabled: true
    hosts:
      - host: console.example.local
        paths:
          - path: /
            pathType: Prefix

# CloudNative PG configuration: https://github.com/cloudnative-pg/charts/blob/main/charts/cloudnative-pg/values.yaml
cloudnative-pg:
  enabled: true
  fullnameOverride: "cloudnative-pg"

# MinIO configuration: https://github.com/minio/minio/blob/master/helm/minio/values.yaml
minio:
  enabled: true
  fullnameOverride: "minio"
  replicas: 2 # 2 is the minimum
  existingSecret: minio-secret # specify user + password manually to avoid redeployments
  resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 1Gi
  buckets:
    - name: galileo-auto-datasets
      policy: none
      purge: false
      versioning: false
      objectlocking: false
    - name: galileo-images
      policy: none
      purge: false
      versioning: false
      objectlocking: false
    - name: galileo-models
      policy: none
      purge: false
      versioning: false
      objectlocking: false
    - name: galileo-project-runs
      policy: none
      purge: false
      versioning: false
      objectlocking: false
    - name: galileo-project-runs-results
      policy: none
      purge: false
      versioning: false
      objectlocking: false
    - name: galileo-prompts-datasets
      policy: none
      purge: false
      versioning: false
      objectlocking: false
    - name: galileo-prompts-results
      policy: none
      purge: false
      versioning: false
      objectlocking: false
  makePolicyJob:
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
  makeBucketJob:
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
  makeUserJob:
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
  customCommandJob:
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
  makeServiceAccountJob:
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi


# RabbitMQ Operator configuration: https://github.com/bitnami/charts/blob/main/bitnami/rabbitmq-cluster-operator/values.yaml
rabbitmq-cluster-operator:
  resources:
      limits:
        cpu: 1000m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi
  fullnameOverride: "rabbitmq-cluster-operator"
  msgTopologyOperator:
    fullnameOverride: "rabbitmq-messaging-topology-operator"
    metrics:
      service:
        enabled: true
      serviceMonitor:
        enabled: true
      podMonitor:
        enabled: true
    resources:
      limits:
        cpu: 1000m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Clickhouse configuration: https://github.com/bitnami/charts/blob/main/bitnami/clickhouse/values.yaml
clickhouse:
  enabled: true
  fullnameOverride: "clickhouse"
  zookeeper:
    fullnameOverride: "zookeeper"

# Metrics Server configuration: https://github.com/kubernetes-sigs/metrics-server/blob/master/charts/metrics-server/values.yaml
metrics-server:
  enabled: true

# Prometheus configuration: https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/values.yaml
prometheus:
  enabled: true
  alertmanager:
    enabled: true
  server:
    replicaCount: 1
    remoteWrite:
      - url: https://prometheus-prod-36-prod-us-west-0.grafana.net/api/prom/push
        basic_auth:
          username: ""
          password: ""
        write_relabel_configs:
          - source_labels: [__name__]
            regex: '^(api_|galileo_|job_|rabbitmq_queue_|nv_inference_|nv_gpu_|nv_cpu_).*'
            action: keep
          - source_labels: [queue]
            regex: '^(health|fast|normal|slow|$)'
            action: keep
  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: 'node-exporter'
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - source_labels: [__meta_kubernetes_endpoints_name]
              regex: 'node-exporter'
              action: keep
        - job_name: 'kubernetes-apiservers'
          kubernetes_sd_configs:
            - role: endpoints
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          relabel_configs:
            - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
              action: keep
              regex: default;kubernetes;https
        - job_name: 'kubernetes-nodes'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/${1}/proxy/metrics
        - job_name: 'kube-state-metrics'
          static_configs:
            - targets: ['galileo-kube-state-metrics.galileo.svc.cluster.local:8080']
        - job_name: 'kubernetes-cadvisor'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
        - job_name: 'kubernetes-service-endpoints'
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              target_label: __address__
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_service_name]
              action: replace
              target_label: kubernetes_name
        - job_name: 'kubernetes-pods'
          # API has high cardinality, so we scrape less frequently.
          scrape_interval: 2m
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: kubernetes_pod_name
        - job_name: 'rabbitmq-http'
          honor_timestamps: true
          metrics_path: /metrics
          scheme: http
          follow_redirects: true
          relabel_configs:
            - source_labels: [job]
              separator: ;
              regex: (.*)
              target_label: __tmp_prometheus_job_name
              replacement: $1
              action: replace
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_component]
              separator: ;
              regex: rabbitmq
              replacement: $1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              separator: ;
              regex: prometheus
              replacement: $1
              action: keep
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Node;(.*)
              target_label: node
              replacement: ${1}
              action: replace
            - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
              separator: ;
              regex: Pod;(.*)
              target_label: pod
              replacement: ${1}
              action: replace
            - source_labels: [__meta_kubernetes_namespace]
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: service
              replacement: $1
              action: replace
            - source_labels: [__meta_kubernetes_pod_name]
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $1
              action: replace
            - source_labels: [__meta_kubernetes_pod_container_name]
              separator: ;
              regex: (.*)
              target_label: container
              replacement: $1
              action: replace
            - source_labels: [__meta_kubernetes_service_name]
              separator: ;
              regex: (.*)
              target_label: job
              replacement: ${1}
              action: replace
            - separator: ;
              regex: (.*)
              target_label: endpoint
              replacement: prometheus
              action: replace
            - source_labels: [__address__]
              separator: ;
              regex: (.*)
              modulus: 1
              target_label: __tmp_hash
              replacement: $1
              action: hashmod
            - source_labels: [__tmp_hash]
              separator: ;
              regex: "0"
              replacement: $1
              action: keep
          kubernetes_sd_configs:
            - role: endpoints
              follow_redirects: true

# Prometheus Adapter configuration: https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus-adapter/values.yaml
prometheus-adapter:
  enabled: true
  fullnameOverride: "prometheus-adapter"
  prometheus:
    url: http://galileo-prometheus-server.galileo.svc
    port: 80
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  rules:
    custom:
      - seriesQuery: 'rabbitmq_queue_messages{namespace!="",service!=""}'
        resources:
          overrides:
            namespace:
              resource: "namespace"
            service:
              resource: "service"
        name:
          as: "fast_queue_job_consumer_ratio"
        metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,queue="fast"}) by (<<.GroupBy>>) / sum(rabbitmq_queue_consumers{<<.LabelMatchers>>,queue="fast"}+0.01) by (<<.GroupBy>>)
      - seriesQuery: 'rabbitmq_queue_messages{namespace!="",service!=""}'
        resources:
          overrides:
            namespace:
              resource: "namespace"
            service:
              resource: "service"
        name:
          as: "normal_queue_job_consumer_ratio"
        metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,queue="normal"}) by (<<.GroupBy>>) / sum(rabbitmq_queue_consumers{<<.LabelMatchers>>,queue="normal"}+0.01) by (<<.GroupBy>>)
      - seriesQuery: 'rabbitmq_queue_messages{namespace!="",service!=""}'
        resources:
          overrides:
            namespace:
              resource: "namespace"
            service:
              resource: "service"
        name:
          as: "slow_queue_job_consumer_ratio"
        metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,queue="slow"}) by (<<.GroupBy>>) / sum(rabbitmq_queue_consumers{<<.LabelMatchers>>,queue="slow"}+0.01) by (<<.GroupBy>>)
      - seriesQuery: 'nv_gpu_utilization{kubernetes_namespace!=""}'
        resources:
          overrides:
            kubernetes_namespace:
              resource: "namespace"
            kubernetes_pod_name:
              resource: "pod"
        name:
          as: "gpu_utilization"
        metricsQuery: 'avg(nv_gpu_utilization{<<.LabelMatchers>>}) by (kubernetes_namespace, kubernetes_pod_name)'
